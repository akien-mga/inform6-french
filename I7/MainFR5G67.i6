! Main.i6

{-callv:start_memory}
{-callv:start_lexer}
{-callv:make_reserved_words}

{-callv:handle_census_mode}

{-segment:Types.i6}

{-callv:make_built_in_relations}
{-callv:make_built_in_verbs}

{-progress-stage:0}

{-log-phase:Lexical analysis}
{-callv:read_primary_source_text}
{-callv:create_kind_kind}

{-progress-stage:1}

{-log-phase:Semantic analysis I}
{-callv:plant_parse_tree} ! Initialise the parse tree
{-callv:break_source_into_sentences} ! Build first tranche of sentences
{-callv:traverse_for_extensions} ! Expand extension inclusions and build sentences
{-callv:traverse_for_verbs} ! Find verbs in the assertion sentences
{-callv:traverse_for_plural_definitions} ! Build irregular plurals dictionary
{-callv:tidy_up_ofs_further} ! More "of" wrangling
{-callv:register_recently_lexed_phrases} ! To make commands children of their routines
{-callv:declare_source_loaded}
{-callv:include_templates_for_types}

{-log-phase:Semantic analysis II}
{-callv:verify_parse_tree} ! Purely to check that NI is running correctly
{-callv:check_extension_versions} ! Do the extension version numbers meet needs?
{-callv:make_heading_tree} ! Stratify headings and subheadings
{-callv:write_headings_as_xml} ! Dump them to a file for the GUI to use

{-log-phase:Semantic analysis III}
{-callv:traverse_for_adjective_definitions}
{-callv:traverse_to_create_tables}
{-callv:traverse_for_phrase_names}

{-progress-stage:2}

{-log-phase:First pass through assertions}
{-read-assertions:1}
{-log-phase:All objects and properties now created}
{-callv:debug_brief_picture}
{-log-phase:Second pass through assertions}
{-read-assertions:2}

{-log-phase:Making the model world}
{-callv:Inform_name_the_actions}
{-callv:Inform_name_the_objects}
{-callv:make_model_world}
{-callv:validate_definitions}
{-callv:make_comparative_bps}

{-log-phase:Tables and grammar}
{-callv:check_tables_for_kind_clashes}
{-callv:traverse_to_stock_tables}
{-callv:traverse_for_grammar}

{-progress-stage:3}

{-log-phase:Phrases and rules}
{-callv:traverse_for_phrases}
{-callv:register_phrase_meanings}
{-callv:parse_rule_parameters}
{-callv:add_rules_to_rulebooks}
{-callv:warn_about_ineffectual_PushDir_rules}
{-callv:parse_rule_placements}

{-callv:empty_all_headings}
{-callv:prepare_use_options}

{-progress-stage:4}

{-log-phase:Code generation}

{-open-file}!% +language_name=Selector
{-call:compile_icl_commands}
! --------------------------------------------------------------------------
! Generated by NI build:
{-call:compile_build_number}
{-array:UUID_ARRAY}
{-call:compile_bibliographic_i6_constants}

#ifdef TARGET_ZCODE;
	Constant I6_NULL $ffff;
	Constant MAX_POSITIVE_NUMBER 32767;
#ifnot;
	Constant I6_NULL $ffffffff;
	Constant MAX_POSITIVE_NUMBER 2147483647;
#endif;

Constant NO_PLACES;
Constant PREFER_HELD;
Constant START_MOVE 1;
Constant HIGHEST_RULEBOOK_NO {-value:NUMBER_CREATED(rulebook)};
Constant I7_OBJECT_TY {-value:OBJECT_TY};

{-routine:I7ExtensionVersions}

Global location = InformLibrary;
Global sline1;
Global sline2;
Global I7_prompt_text = ">";
Global I7_command;
Global I7_match_snippet;
Global I7_mistake_code;
Global I7_left_sl = SL_Location;
Global I7_right_sl = SL_Score_Moves;
Global I7_box;
Global act_requester;
Global I7_action_deciding_rule;
Global I7_concealed_item;
Global I7_TProp;
Global I7_TSign;
Global I7_suppress_scope_loops;
Global I7BASP = 0;

Constant I7_EMPTY_TEXT "";

Global say__n;
Array I7_CS --> 16;
Array I7_boxes_appeared --> I7_BOXES;

Constant WITHOUT_DIRECTIONS;
{-call:compile_max_score}
{-call:compile_general_inclusions}

! --- Replacements of library routines ---
{-call:see_if_test_scenarios_exist}
#IFDEF DEBUG;
#IFDEF TEST_SCENARIOS_EXIST;
Replace KeyboardPrimitive;
#ENDIF;
#ENDIF;
Replace DrawStatusLine;
Replace BeforeRoutines;
Replace ActionPrimitive;
Replace AfterRoutines;
Replace ObjectIsUntouchable;
Replace AllowPushDir;
Replace ActionsOnSub;
Replace ActionsOffSub;
{-call:compile_verblib_replaces}

! --- Variables used in printing ---
Global say__c; Global say__p = 1; Global say__pc = 0;
Global I7_caps_mode = false;
Global I7_uninitialised = false;
Global I7_IT_RE_Trace = false;
Global I7_IT_RE_Err = 0;

! --- Properties ---
Property component_parent;
Property component_child;
Property component_sibling;
Property I7_Map_Region;
Property regional_found_in;

! --- I7 type numbers as I6 constants ---

{-call:compile_I6_constants_for_typenames}

! --- Inclusion of library routines ---
Include "Parser";
Include "VerbLib";

Array Protect_I7_Arrays --> 16339 12345;

! --- Attributes ---
{-call:compile_attributes}
Attribute initially_carried;
Attribute i7listflag;
Attribute I7_mentioned;

! --- Quantities ---
{-call:declare_quantities}
{-array:I7_Globals}

! --- Activities ---
{-call:compile_activity_constants}
{-array:Activity_before_rulebooks}
{-array:Activity_when_rulebooks}
{-array:Activity_after_rulebooks}
{-array:Activity_atb_rulebooks}

! --- Variable used in debugging ---
Global debug_rules = 0;
Global debug_scenes = 0;

! --- Variables and arrays used in action processing ---
Attribute pushable; Global move_pushing;
Global move_from; Global move_to;
Global move_by; Global move_through;
Global actor_location;

Constant RS_CAPACITY = 666;
Global   rulechange_sp = 0;
Array    rulechange_stack --> RS_CAPACITY;
Global   los_rv = false;
Array    scene_started --> ({-value:NUMBER_CREATED(scene)}+2);
Array    scene_ended --> ({-value:NUMBER_CREATED(scene)}+2);
Array    scene_status --> ({-value:NUMBER_CREATED(scene)}+2);
Array    scene_endings --> ({-value:NUMBER_CREATED(scene)}+2);
Array    scene_latest_ending --> ({-value:NUMBER_CREATED(scene)}+2);

Constant Relation_Implicit	-1;
Constant Relation_OtoO		1;
Constant Relation_OtoV		2;
Constant Relation_VtoO		3;
Constant Relation_VtoV		4;
Constant Relation_Sym_OtoO	5;
Constant Relation_Sym_VtoV	6;
Constant Relation_Equiv		7;
Constant Relation_ByRoutine	8;

{-array:RelationList}

! --- Variable used by choose objects mechanism ---
Global cobj_flag = 0;
[ I7ResetChooseObjects; cobj_flag = 0; rfalse; ];

Array LocalParking --> 16;

! --- Printing routines ---
{-call:compile_printing_routines}
{-routine:I7_Kind_Name}
{-routine:I7_RulebookOutcomePrintingRule}

{-call:compile_property_numberspace_forcer}

{-log:Compiling the object tree}

! --- Object tree ---
{-call:compile_object_tree}

! --- Property metadata ---
{-array:property_metadata}
Array attribute_offsets --> (50 + {-value:NUMBER_CREATED(property_name)});
#IFDEF TARGET_ZCODE;
Array property_offsets --> (100 + {-value:NUMBER_CREATED(property_name)});
#IFNOT; ! TARGET_ZCODE
Array property_offsets -->
	(100 + {-value:NUMBER_CREATED(property_name)} + INDIV_PROP_START - 48);
#ENDIF; ! TARGET_ZCODE
{-routine:CreatePropertyOffsets}

{-log:Compiling the tables}
{-call:compile_tables}

[ PrintTableName T;
	switch(T) {
{-call:compile_print_table_names}
		default: print "** No such table **";
	}
];

{-call:write_test_text}

{-log:Compiling the phrases}
Global parameter_object;
{-call:compile_phrases}

{-array:I7TimerTable}
{-array:I7TimerTableTimes}

[ TurnEndPrimitive;
	actor = player; self = player; act_requester = 0;
	BeginActionProcessing();
	ProcessRulebook(TURNEND_RB);
	EndActionProcessing();
];

[ BeforeRoutines x; self = noun;
	ChronologyPoint();
	rfalse;
];

[ AfterRoutines; self = noun;
	if (ProcessRulebook(AFTER_RB)) rtrue;
	if (keep_silent == 1) rtrue;
	return ProcessRulebook(REPLY_RB);
];

{-log:Compiling the rulebooks}
Array EMPTY_RULEBOOK -> $ff $ff $ff $ff; ! 4 bytes needed in case of Glulx
{-array:rulebooks_array}
{-call:compile_rulebooks}
{-segment:MStack.i6}

{-segment:RTP.i6}
{-segment:Printing.i6}
{-segment:Rulebooks.i6}
{-segment:Actions.i6}
{-segment:Activities.i6}
{-segment:Relations.i6}
{-segment:WorldModel.i6}
{-segment:Figures.i6}
{-segment:FileIO.i6}

{-call:external_file_arrays}

[ I7_char_to_digit c n;
	n = c-'0';
	if ((n<0) || (n>9)) return -1;
	return n;
];

[ I7_Match test snippet w1 wlen i j;
	if (metaclass(test) == Routine) {
		w1 = snippet/100; wlen = snippet%100;
		for (i=w1, j=wlen: j>0: i++, j--) {
			if (((test)(i, 0)) ~= GPR_FAIL) return i*100+wn-i;
		}
	}
	rfalse;
];

[ I7_ParseToken x y;
	if (wn>WordCount()) return GPR_FAIL;
	return ParseToken(x,y);
];

[ I7_SeedRNG n; ! Seed the random number generator
	#ifdef TARGET_ZCODE;
	if (n > 0) n = -n;
	@random n -> n;
	#ifnot; ! TARGET_GLULX
	@setrandom n;
	#endif; ! TARGET_
];
[ I7_RNG n m s;
	if (n==m) return n;
	if (n>m) { s = n; n = m; m = s; }
	n--;
	return random(m-n) + n;
];

{-routine:I7_SceneChange}
#IFDEF DEBUG;
{-routine:I7_SceneStatus}
#ENDIF;
{-call:resolve_predeclared_booked_rules}

{-segment:Tables.i6}

{-call:compile_adjectival_phrases}
{-call:compile_defined_relations}
{-routine:MistakeActionSub}

{-log:Compiling the text routines}
{-call:compile_text_routines}
{-log:Compiling the loop-over-scope routines}
{-call:compile_los_routines}
{-log:Compiling the named action patterns}
{-call:compile_named_action_patterns}

{-log:Compiling the action routines}
Constant ActionCount = {-value:NUMBER_CREATED(action_name)};
{-array:ActionData}
{-array:ActionCoding}
{-array:ActionHappened}
{-call:compile_action_routines}

{-segment:Verbs.i6}
	
! --- List together routines ---
{-call:compile_list_together_routines}

[ Initialise pp;
	CreatePropertyOffsets();
	I7_Blk_Initialise(); I7_Initial_Heap_Allocation(); I7_Create_Blk_Consts();
{-call:compile_initial_time_and_place}
	#ifdef I7_LOOKMODE; lookmode = I7_LOOKMODE; #endif;
	InformLibrary.end_turn_sequence = TurnEndPrimitive;
	TimePasses(); TS6_R();
	print "^^";
	! ensure that visibility, etc., is correct for when play begins rules
	move player to location;
	real_location = location;
	I7_uninitialised = true;
	FollowRulebook(GAME_BEGINS_RB);
	pp = parent(player);
	if (pp ofclass K1_room) location = pp;
	else if (pp ofclass K2_thing) location = pp;
	if (pp) remove player; ! let the I6 library reposition the player
	I7_uninitialised = false;
];

[ DeathMessage;
	if (deadflag ofclass Routine) (deadflag)();
	if (deadflag ofclass String) print (string) deadflag;
];

[ AfterLife;
	FollowRulebook(GAME_ENDS_RB);
];

[ TimePasses;
	ChronologyTurnEnd();
];

[ ParserError error_type;
	if (error_type ofclass String) print_ret (string) error_type;
	if (error_type ofclass Routine) { error_type.call(); new_line; rtrue; }
	rfalse;
];

{-segment:ChooseObjects.i6}

{-routine:I7ReadUseOption}

{-log:Compiling chronology}

{-segment:Chronology.i6}
{-call:compile_time_passes}

{-log-phase:Compiling grammar}

Constant SUPPRESS_ACTION_GRAMMAR;

#IFTRUE ({-value:no_verb_verb_defined} == 1);
[ UnknownVerb;
	verb_wordnum = 0; return 'no.verb';
];
[ PrintVerb v;
	if (v == 'no.verb') { print "do something to"; rtrue; }
	rfalse;
];
#ENDIF;

#IFDEF ForeignLanguage;
#IFNOT;
	Include "Grammar";
#ENDIF;

{-callv:prepare_grammar}
{-call:compile_grammar_conditions}

{-log:Compiling type gprs}
[ I7_NUMBER_TOKEN wnc wna r n wa wl sign base digit digit_count original_wn group_wn;
	wnc = wn; original_wn = wn; group_wn = wn;
{-call:compile_number_grammar}
	wn = wnc;
	r = I7_ParseToken(ELEMENTARY_TT, NUMBER_TOKEN);
	if ((r == GPR_NUMBER) && (parsed_number ~= 10000)) return r;
	wn = wnc;
	wa = WordAddress(wn);
	wl = WordLength(wn);
	sign = 1; base = 10; digit_count = 0;
	if (wa->0 ~= '-' or '$' or '0' or '1' or '2' or '3' or '4'
		or '5' or '6' or '7' or '8' or '9')
		return GPR_FAIL;
	if (wa->0 == '-') { sign = -1; wl--; wa++; }
	if (wl == 0) return GPR_FAIL;
	n = 0;
	while (wl > 0) {
		if (wa->0 >= 'a') digit = wa->0 - 'a' + 10;
		else digit = wa->0 - '0';
		digit_count++;
		switch (base) {
			2:  if (digit_count == 17) return GPR_FAIL;
			10:
#IFDEF TARGET_ZCODE;
				if (digit_count == 6) return GPR_FAIL;
				if (digit_count == 5) {
					if (n > 3276) return GPR_FAIL;
					if (n == 3276) {
						if (sign == 1 && digit > 7) return GPR_FAIL;
						if (sign == -1 && digit > 8) return GPR_FAIL;
					}
				}
#IFNOT; ! TARGET_GLULX
				if (digit_count == 11) return GPR_FAIL;
				if (digit_count == 10) {
					if (n > 214748364) return GPR_FAIL;
					if (n == 214748364) {
						if (sign == 1 && digit > 7) return GPR_FAIL;
						if (sign == -1 && digit > 8) return GPR_FAIL;
					}
				}
#ENDIF; 
			16: if (digit_count == 5) return GPR_FAIL;
		}
		if (digit >= 0 && digit < base) n = base*n + digit;
		else return GPR_FAIL;
		wl--; wa++;
	}
	parsed_number = n*sign; wn++;
	return GPR_NUMBER;
];
{-segment:Time.i6}

{-call:compile_type_gprs}

{-log:Compiling filters}
{-call:compile_filters}

{-log:Compiling grammar verbs}
{-call:compile_grammar_verbs}

#IFDEF DEBUG;
{-log-phase:Debugging verbs at run-time}
{-segment:Tests.i6}
{-segment:Debugging.i6}
#ENDIF; ! DEBUG

{-log-phase:Winding up}

{-call:compile_general_inclusions}

{-log:Compiling routines from predicate calculus}

! The falsity proposition represents the empty set
[ Prop_Falsity reason obj; return 0; ];

{-call:compile_deferred_propositions}
{-call:compile_resolver_routines}
{-call:compile_string_constants}
{-call:compile_stub_properties}
#IFNDEF I7_cap_short_name;
Constant I7_cap_short_name = short_name;
#ENDIF;

{-call:compile_allocated_counter_storage}

Constant I7_BOXES = {-value:extent_of_runtime_quotations_array};

{-call:compile_heap_allocator}

{-segment:Flex.i6}
{-segment:IndexedText.i6}
{-segment:StoredAction.i6}
{-call:create_block_constants}

{-log-phase:Compilation now complete}

! End of automatically generated I6 source
! --------------------------------------------------------------------------
{-close-file}

{-callv:write_ifiction_and_blurb}

{-open-index}
{-index:Kinds}
	{-callv:index_page_Kinds}
{-index:World}
	{-callv:index_page_World}
{-index:Actions and Commands}
	{-callv:index_page_Actions}
{-index:Rules}
	{-callv:index_page_Rules}
{-index:Phrasebook}
	{-callv:index_page_Phrasebook}
{-index:Contents}
	{-callv:index_headings}
	{-callv:index_extensions}
	{-callv:index_quantities}
	{-callv:index_tables}
	{-callv:index_figures}
	{-callv:index_sounds}
	{-callv:index_external_files}
	{-callv:index_library_card}
{-index:Scenes}
	{-callv:index_page_Scenes}
{-callv:complete_index}
{-close-index}

{-callv:complete_problems_report} 

{-callv:report_pairs_observed}
{-callv:report_pairs_allowed}

{! -callv:debug_memory_statistics}
{! -callv:debug_parser_statistics}
{! -callv:debug_verbs}

{-callv:free_memory}

! End of Main.i6
